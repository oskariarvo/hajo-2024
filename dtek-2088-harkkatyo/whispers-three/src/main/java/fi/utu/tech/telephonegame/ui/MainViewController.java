package fi.utu.tech.telephonegame.ui;

import fi.utu.tech.telephonegame.GuiIO;
import fi.utu.tech.telephonegame.network.Resolver.NetworkType;
import javafx.application.Platform;
import javafx.beans.binding.Bindings;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.control.Button;
import javafx.scene.control.CheckBox;
import javafx.scene.control.ComboBox;
import javafx.scene.control.Label;
import javafx.scene.control.ListCell;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.HBox;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.VBox;
import javafx.scene.shape.Circle;
import javafx.scene.control.ListView;
import javafx.scene.paint.Color;

/**
 * Do not edit this file. Älä muokkaa tätä tiedostoa.
 * 
 * This class is the JavaFx controller class for the GUI.
 */

public class MainViewController {

	@FXML
	private ListView<ChatBubbleContent> chatBox;

	@FXML
	private Button connectButton;

	@FXML
	private ComboBox<String> ipAddresses;

	@FXML
	private RadioButton netSelectionLocal;

	@FXML
	private RadioButton netSelectionPublic;

	@FXML
	private TextField newMessage;

	@FXML
	private Button sendNewButton;

	@FXML
	private CheckBox setRootNode;

	private GuiIO gui_io;
	private ToggleGroup radioGroup;
	private NetworkType netType = NetworkType.LOCALHOST;
	private boolean rootNode = false;

	public void set_Gui_io(GuiIO gui_io) {
		this.gui_io = gui_io;
	}

	public void addIPs() {
		ipAddresses.getItems().addAll(gui_io.getIPs());
		ipAddresses.getSelectionModel().selectFirst();
	}

	@FXML
	public void initialize() {
		radioGroup = new ToggleGroup();
		netSelectionLocal.setToggleGroup(radioGroup);
		netSelectionPublic.setToggleGroup(radioGroup);
		netSelectionLocal.setOnAction(event -> netType = NetworkType.LOCALHOST);
		netSelectionPublic.setOnAction(event -> netType = NetworkType.PUBLIC);
		netSelectionLocal.setSelected(true);
		setRootNode.setOnAction(event -> rootNode = !rootNode);
		ipAddresses.disableProperty()
				.bind(setRootNode.selectedProperty().not().or(netSelectionLocal.selectedProperty()));
		connectButton.textProperty().bind(Bindings.when(setRootNode.selectedProperty()).then("Start waiting for others")
				.otherwise("Discover a peer and connect"));

		chatBox.setCellFactory(listView -> new ListCell<>() {
			@Override
			protected void updateItem(ChatBubbleContent bubbleContent, boolean empty) {
				super.updateItem(bubbleContent, empty);
				if (empty || bubbleContent == null) {
					setText(null);
					setGraphic(null);
				} else {
					HBox messageContainer = new HBox();
					messageContainer.setSpacing(5);

					ChatBubble receiveBubble = new ChatBubble("Received", bubbleContent.receivedMessage);
					ChatBubble sentBubble = new ChatBubble("Sent", bubbleContent.refinedMessage);
					Label arrowLabel = new Label("→");
					
					// Indicator circle with color based on hop count and the hop count on top
					Circle signal = new Circle();
					Color c = bubbleContent.getColor();
					signal.setFill(c);
					signal.setRadius(10);
					Label hops = new Label(bubbleContent.hops.toString());
					double luminance = 0.2126 * c.getRed() + 0.7152 * c.getGreen() + 0.0722 * c.getBlue();
					hops.setStyle(luminance > 0.5 ? "-fx-text-fill: black;" : "-fx-text-fill: white;");
					StackPane indicator = new StackPane(signal, hops);

					arrowLabel.setStyle("-fx-text-fill: gray; -fx-font-size: 14px;");
					messageContainer.setAlignment(Pos.CENTER_LEFT);
					messageContainer.getChildren().addAll(indicator, receiveBubble, arrowLabel, sentBubble);
					setGraphic(messageContainer);
				}
			}
		});

	}

	@FXML
	private void sendNewMessage(ActionEvent event) {
		addComposedMessage(newMessage.getText());
		gui_io.sendNewMessage(newMessage.getText());
		newMessage.clear();
	}

	@FXML
	private void connectButtonPressed(ActionEvent event) {
		gui_io.connect(netType, rootNode, ipAddresses.getValue());
		connectButton.setDisable(true);
	}

	public void enableConnect() {
		Platform.runLater(() -> connectButton.setDisable(false));
	}

	public void addComposedMessage(String sentMessage) {
		addMessage("(none)", sentMessage, 0);

	}

	public void addMessage(String receivedMessage, String refinedMessage, Integer signal) {
		Platform.runLater(() -> {
			chatBox.getItems().add(new ChatBubbleContent(receivedMessage, refinedMessage, signal));
		});
	}


}

class ChatBubbleContent {

	public String receivedMessage;
	public String refinedMessage;
	public Integer hops;

	public ChatBubbleContent(String receivedMessage, String refinedMessage, Integer hops) {
		this.receivedMessage = receivedMessage;
		this.refinedMessage = refinedMessage;
		this.hops = hops;
	}

	public Color getColor() {
		int hueShift = this.hops*30 % 360;
		return Color.web("hsl(" + hueShift + ",100%,100%)");
	}

}


class ChatBubble extends VBox {

	public ChatBubble(String meta, String content) {
		super();
		this.setStyle("-fx-padding: 10; -fx-background-radius: 10; -fx-background-color: lightgray;");

		Label metaLabel = new Label(meta);
		Label contentLabel = new Label(content);

		metaLabel.setStyle("-fx-font-weight: bold; -fx-text-fill: gray;");
		contentLabel.setWrapText(true);

		this.getChildren().addAll(metaLabel, contentLabel);

	}

}
